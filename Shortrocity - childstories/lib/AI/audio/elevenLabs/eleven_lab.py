from elevenlabs.client import ElevenLabs
from elevenlabs.core.api_error import ApiError
from enum import Enum
from typing import List, Dict
import json
from auth.api_manager import APIKeyManager
import logging
api_manager = APIKeyManager()
from lib.AI.audio.elevenLabs.eleven_lab_validator import ElevenLabsValidator
# enum for voices
class Voices(Enum):
    """mapping of voices to their ids"""
    JANEDOEINTIMATE = "SaqYcK3ZpDKBAImA8AdW"
    IVY = "a0euEDMIIr9cUObJf0DX"
    BRITTNEY = "kPzsL2i3teMYv0FxEYQ6"
    GEORGE = "JBFqnCBsd6RMkjVDRZzb"
    ALICE = "Xb7hH8MSUJpSbSDYk0k2"
    
logger = logging.getLogger(__name__)
class HelevenLabs:
    def __init__(self, api_key: str = None):
        """
        Initialize the ElevenLabs client with the provided API key.

        Args:
            api_key (str): The API key for ElevenLabs.
        """
        if api_key:
            if not ElevenLabsValidator.validate_key(api_key):
                raise RuntimeError("Invalid ElevenLabs API key.")
            self.client = ElevenLabs(api_key=api_key)
        else:
            api_key = api_manager.get_working_elevenlabs_key()
            logger.info(f'\n\nUsing ElevenLabs API key: {api_key}\n\n')
            if api_key:
                self.client = ElevenLabs(api_key=api_key)
            else:
                raise RuntimeError("No working ElevenLabs API key found.")
    

    CHUNK_SIZE = 1024  # Size of chunks to read/write at a time
    # test API key
    
    def text_to_speech(self, text: str, output_file: str, voice: Voices = Voices.ALICE) -> str:
        """
        Convert text to speech using the specified voice and save the output to a file.

        Args:
            text (str): The text to be converted to speech.
            voice (Voices): The voice to be used for the speech.
            output_file (str): The path to the file where the audio will be saved.

        Returns:
            str: The audio content generated by the text-to-speech conversion.

        Raises:
            ValueError: If the text is empty or the output file path is invalid.
            RuntimeError: If there is an error during the text-to-speech conversion or file writing.
        """
        if not text:
            raise ValueError("Text for text-to-speech conversion cannot be empty.")
        if not output_file:
            raise ValueError("Output file path cannot be empty.")

        try:
            audio = self.client.generate(text=text, voice=voice.value)
            with open(output_file, "wb") as f:
                for chunk in audio:
                    f.write(chunk)
            return audio
        except ApiError as e:
            raise RuntimeError(f"Failed to generate speech: {e}")
        except IOError as e:
            raise RuntimeError(f"Failed to write audio to file: {e}")
        except Exception as e:
            raise RuntimeError(f"Failed to generate speech: {e}")
    
    def get_voices(self) -> List[Dict]:
        try:
            voices_response = self.client.voices.get_all()
            voices = []
            for voice in voices_response.voices:
                voices.append({"name":voice.name, "id":voice.voice_id, "labels":voice.labels, "description":voice.description,"category":voice.category})
            with open("voices.json", "w") as f:
                json.dump(voices, f)
            return voices
        except ApiError as e:
            raise RuntimeError(f"Failed to get voices: {e}")
    
    def design_voice(self, voice_name: str, voice_description: str, voice_id: str, voice_labels: Dict):
        """https://elevenlabs.io/docs/api-reference/ttv-create-voice-from-preview"""
        import requests

        url = "https://api.elevenlabs.io/v1/text-to-voice/create-voice-from-preview"

        payload = {
            "voice_name": voice_name,
            "voice_description": voice_description,
            "generated_voice_id": voice_id,
            "labels": voice_labels,
            "played_not_selected_voice_ids": ["<string>"]
        }
        headers = {"Content-Type": "application/json"}

        response = requests.request("POST", url, json=payload, headers=headers)

        print(response.text)
    
# eleven_labs = HelevenLabs(api_key="sk_fe2579cb1aa5dad69b2e2f54e6ee77ce827dd9578f46a719")

# eleven_labs.text_to_speech(text="Hello, how are you?", voice=Voices.ALICE, output_file=Voices.ALICE.name+".mp3")
# eleven_labs.get_voices()
# print(f'\n\n {voices=}');
# print('\n ============\n\n');
